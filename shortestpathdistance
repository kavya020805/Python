import heapq

def dijkstra(graph, start):
    # Initialize the distances to all nodes as infinity, except for the start node.
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Priority queue to store nodes with their distances.
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # If the current distance is greater than the known distance, skip it.
        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            # If the new distance is shorter, update it.
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

# Define a sample graph
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Find the shortest distances from node 'A' to all other nodes
shortest_distances = dijkstra(graph, 'A')

# Print the results
for node, distance in shortest_distances.items():
    print(f'Shortest distance from A to {node} is {distance}')

